:- module(math, [
	':='/1, ':='/2, '=:='/2, '=\\='/2,
	'>'/2, '<'/2, '>='/2, '<='/2,
	range/2, range/1,
	between/3, between/6,
	plus/3, minus/3,
	increment/2, decrement/2,
	fibonacci/2, factorial/2,
	max/3, min/3,
	test/1
]).

:- op(50, fx, [':=', is]).
:- op(50, xfx, [':=', is]).
:- op(50, xfx, ['=:=']).
:- op(50, xfx, ['=\\=']).
:- op(60, xfy, ['>']).
:- op(60, xfy, ['>=', '≥']).
:- op(60, yfx, ['<']).
:- op(60, yfx, ['<=', '≤']).

:- op(290, fx, ['floor']).
:- op(290, fx, ['round']).
:- op(290, fx, ['ceil']).
:- op(300, xfx, ['mod']).
:- op(700, xfy, ['^']).
:- op(600, xfx, ['*']).
:- op(600, xfx, ['/']).
:- op(600, xfx, ['//']).
:- op(500, xfx, ['+']).
:- op(500, xfx, ['-']).
:- op(500, xfy, ['>>']).
:- op(500, xfy, ['<<']).
:- op(5, fx, ['+']).
:- op(5, fx, ['-']).

:- expand([O] >> ('π' :- O = 3.14159265359)).
:- expand([O] >> ('τ' :- O = 6.28318530717)).
%: Expansion for inline arithmetic evaluation.
:- expand([O] >> (':='(A) :- O is A)).

:- inline('>'/2, '<'/2, '>='/2, '<='/2, ':='/2, '=:='/2, '=\\='/2, increment/2, decrement/2).

% OPERATORS

%: Assignment of A to the arithmetic evaluation of B.
':='(A, B) :- eval(A, B).
%: Equivalence of the arithmetic evaluations of A and B.
'=:='(A, B) :- eval(Ae, A), eval(Be, B), Ae == Be.
%: Inequivalence of the arithmetic evaluations of A and B.
'=\\='(A, B) :-eval(Ae, A), eval(Be, B), Ae \== Be.
%: Arithmetic comparison (gt).
'>'(A, B)  :- eval(1, A > B).
%: Arithmetic comparison (lt).
'<'(A, B)  :- eval(1, A < B).
%: Arithmetic comparison (gte).
'>='(A, B) :- eval(1, A >= B).
%: Arithmetic comparison (lte).
'<='(A, B) :- eval(1, A <= B).

% HELPERS

between('[', Min, Max, ']', Step, M) :- for(M, Min, :=(Max + Step), Step).
between('(', Min, Max, ']', Step, M) :- for(M, :=(Min + Step), :=(Max + Step), Step).
between('[', Min, Max, ')', Step, M) :- for(M, Min, Max, Step).
between('(', Min, Max, ')', Step, M) :- for(M, :=(Min + Step), Max, Step).

between(Min, Max, M) :- between('(', Min, Max, ']', 1, M).

% EXPORTED

range(Min < X < Max, Step)   :- ground(Step), between('(', Min, Max, ')', Step, X).
range(Min <= X < Max, Step)  :- ground(Step), between('[', Min, Max, ')', Step, X).
range(Min < X <= Max, Step)  :- ground(Step), between('(', Min, Max, ']', Step, X).
range(Min <= X <= Max, Step) :- ground(Step), between('[', Min, Max, ']', Step, X).
range(R) :- range(R, 1).

plus(A, B, C) :- ground(A), ground(B), \+ground(C), !, C := A + B.
plus(A, B, C) :- ground(A), \+ground(B), ground(C), !, B := C - A.
plus(A, B, C) :- \+ground(A), ground(B), ground(C), !, A := C - B. 

minus(A, B, C) :- ground(A), ground(B), \+ground(C), !, C := A - B.
minus(A, B, C) :- ground(A), \+ground(B), ground(C), !, B := A - C.
minus(A, B, C) :- \+ground(A), ground(B), ground(C), !, A := B + C. 

increment(A, A1) :- A1 := A + 1.
decrement(A, A1) :- A1 := A - 1.
		
fibonacci(0, 0) :- !.
fibonacci(1, 1) :- !.
fibonacci(N,Result) :- fibonacci(N, 0, 1, Result).
fibonacci(0, N, _, N).
fibonacci(N, Prev1, Prev2, Result) :- N > 0, fibonacci(:=(N - 1), Prev2, :=(Prev1 + Prev2), Result).

factorial(N, R) :- factorial(N, 1, R).
factorial(0, R, R) :- !.
factorial(N, Acc, R) :-
    factorial(:=(N - 1), :=(Acc * N), R).

max(A, B, Max) :- A > B -> Max = A ; Max = B.
min(A, B, Min) :- A < B -> Min = A ; Min = B.